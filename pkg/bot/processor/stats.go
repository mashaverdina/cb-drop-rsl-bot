package processor

import (
	"context"
	"fmt"
	"strings"
	"vkokarev.com/rslbot/pkg/export"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	chatutils "vkokarev.com/rslbot/pkg/chat_utils"
	"vkokarev.com/rslbot/pkg/entities"
	"vkokarev.com/rslbot/pkg/formatting"
	"vkokarev.com/rslbot/pkg/keyboards"
	"vkokarev.com/rslbot/pkg/messages"
	"vkokarev.com/rslbot/pkg/storage"
)

type StatsProcessor struct {
	cbStatStorage *storage.CbStatStorage
	exporter      export.Exporter
}

func NewStatsProcessor(cbStatStorage *storage.CbStatStorage) *StatsProcessor {
	return &StatsProcessor{
		cbStatStorage: cbStatStorage,
		exporter:      export.NewExcelExporter(cbStatStorage),
	}
}

func (p *StatsProcessor) LastStat(ctx context.Context, msg *ProcessingMessage, resource string, header string, levels []int) ([]tgbotapi.Chattable, error) {
	msgs := []string{header}
	for _, level := range levels {
		last, err := p.cbStatStorage.LastResource(ctx, msg.User.UserID, level, resource)
		if err != nil {
			return nil, err
		}
		msgs = append(msgs, fmt.Sprintf("–° %d–≥–æ -- %s", level, formatting.TimePast(last)))
	}

	resp := chatutils.JoinResp(
		chatutils.EditTo(msg, strings.Join(msgs, "\n"), nil),
		chatutils.TextTo(msg, "–ß—Ç–æ —Ç–µ–±–µ –ø–æ–∫–∞–∑–∞—Ç—å?", &keyboards.StatsKeyboard),
	)
	return resp, nil
}

func (p *StatsProcessor) Handle(ctx context.Context, state entities.UserState, msg *ProcessingMessage) (entities.UserState, []tgbotapi.Chattable, error) {
	switch msg.Text {
	case messages.Back:
		state.ProcType = entities.StateMainMenu
		resp := chatutils.DisableKeyboardAndSendNew(msg, "–î–æ –≤—Å—Ç—Ä–µ—á–∏", keyboards.MainMenuKeyboard)
		return state, resp, nil
	case messages.LastVoidShard:
		state.ProcType = entities.StateStats
		resp, err := p.LastStat(ctx, msg, "void_shard", messages.LastVoidShard, []int{4, 5, 6})
		return state, resp, err
	case messages.LastSacredShard:
		state.ProcType = entities.StateStats
		resp, err := p.LastStat(ctx, msg, "sacred_shard", messages.LastSacredShard, []int{5, 6})
		return state, resp, err
	case messages.LastLegTome:
		state.ProcType = entities.StateStats
		resp, err := p.LastStat(ctx, msg, "leg_tome", messages.LastLegTome, []int{5, 6})
		return state, resp, err
	case messages.MonthStats:
		state.ProcType = entities.StateMonth
		state.Options.WithLevels(4, 5, 6)
		state.Options.WithShowFullStat(true)
		return state, chatutils.EditTo(msg, "üìÖ –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏", keyboards.ChooseMonthKeyboard()), nil
	case messages.MonthStatsShort:
		state.ProcType = entities.StateMonth
		state.Options.WithLevels(4, 5, 6)
		state.Options.WithShowFullStat(false)
		return state, chatutils.EditTo(msg, "üìÖ –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏", keyboards.ChooseMonthKeyboard()), nil
	case messages.FullStatExcel:
		fn, activity, err := p.exporter.Export(ctx, msg.User.UserID)
		if err != nil {
			return state, nil, err
		}

		text := p.prepareActivityMessage(activity)
		resp := chatutils.JoinResp(
			chatutils.DisableKeyboardAndSendNew(msg, text, keyboards.MainMenuKeyboard),
			[]tgbotapi.Chattable{tgbotapi.NewDocumentUpload(msg.User.Chat(), fn)},
		)
		return state, resp, nil
	default:
		return state, nil, UnknownResuest
	}
}

func (p *StatsProcessor) CancelFor(userID int64) {
}

func (p *StatsProcessor) prepareActivityMessage(activity export.ActivityStat) string {
	hello := fmt.Sprintf("–¢—ã —Å –Ω–∞–º–∏ —É–∂–µ *%d* –¥–Ω–µ–π, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö *%d* –¥–Ω–µ–π, —Ç—ã –∑–∞–Ω–æ—Å–∏–ª —Å–≤–æ–π –¥—Ä–æ–ø. ", activity.DaysFromFisrtStart, activity.TotalDays)
	if activity.IsActive(0.6) {
		hello += "–ü–æ—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø–æ—Ä—Å—Ç–≤–æ! ü§òü§òü§ò"
	} else {
		hello += "–ù–∞–¥–µ—é—Å—å, —á—Ç–æ —Ç—ã –µ—â–µ —Ä–∞—Å–ø—Ä–æ–±—É–µ—à—å –±–æ—Ç üòéüòéüòé"
	}
	cb := fmt.Sprintf("–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è —Ç—ã —É–±–∏–ª *%d* üëæ/üòà/üëπ ", activity.CbTotalKilled) +
		fmt.Sprintf("–ò –ø–æ–ª—É—á–∏–ª *%d*üíõ + *%d*üíú + *%d*üíô + *%d*üìô + *%d*üìò", activity.Sacred, activity.Void, activity.Ancient, activity.LegTome, activity.EpicTome)
	ending := "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –±–æ—Ç–æ–º ü•∞"
	return strings.Join([]string{hello, cb, ending}, "\n")
}
